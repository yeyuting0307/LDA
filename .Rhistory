par(mfrow = c(1, ncol(iris.pars)))
for(j in 1:ncol(iris.pars)){
boxplot(iris.pars[,j], col = (j+1), main = colnames(iris.pars)[j])
}
install.packages(c("dplyr", "ggplot2", "outliers", "timeDate", "vegan"))
library(dplyr)
iris.hle <- iris[1:4] %>% as.matrix %>% decostand("hellinger")
iris.cluster <- iris.hle %>% vegdist("euc") %>% hclust("ward.D2")
plot(iris.cluster)
iris.gr <-  iris.cluster %>% cutree(3)
table(iris.gr)
any(is.na(iris))
library(dplyr)
library(magrittr)
library(ggplot2)
library(vegan) # standardization
source('Source_LDA.R') # ModelPerformance
iris.hle <- iris[1:4] %>% as.matrix %>% decostand("hellinger")
iris.cluster <- iris.hle %>% vegdist("euc") %>% hclust("ward.D2")
plot(iris.cluster)
iris.gr <-  iris.cluster %>% cutree(3)
table(iris.gr)
iris.gr <-  iris.cluster %>% cutree(3)
table(iris.gr)
any(is.na(iris))
any(is.na(iris))
iris.pars <- iris[, 1:4] %>% as.matrix
iris.pars.d <- dist(iris.pars)
iris.MHV <- betadisper(iris.pars.d, gr)
iris.MHV
plot(iris.MHV)
anova(iris.MHV)
permutest(iris.MHV)
par(mfrow = c(1, ncol(iris.pars)))
for(j in 1:ncol(iris.pars)){
boxplot(iris.pars[,j], col = (j+1), main = colnames(iris.pars)[j])
}
timeDate::skewness(iris[1:4])
timeDate::skewness(iris[1:4])
# Outliers
```{r}
outliers::outlier(iris[2])
```
```{r}
which(iris[2] >= 4.1 | iris[2] < 2.2) # depend on boxplot
which(iris[2] >= 4.1 | iris[2] < 2.2) # depend on boxplot
# Transformation
```{r}
ptr <- which(iris[2] >= 4.1 | iris[2] < 2.2)
iris[ptr, 2] <- mean(iris[,2])
iris2 <- cbind(log(iris[1]), iris[2], iris[3], iris[4])
```{r}
timeDate::skewness(iris2[1:4])
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j], col = (j+1) )
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j], col = (j+1) )
}
timeDate::skewness(iris[1:4])
timeDate::skewness(iris[1:4])
# Outliers
```{r}
outliers::outlier(iris[2])
```
```{r}
which(iris[2] >= 4.1 | iris[2] < 2.2) # depend on boxplot
ptr <- which(iris[2] >= 4.1 | iris[2] < 2.2)
iris[ptr, 2] <- mean(iris[,2])
iris2 <- cbind(log(iris[1]), iris[2], iris[3], iris[4])
```{r}
timeDate::skewness(iris2[1:4])
par(mfrow = c(1, ncol(iris2.pars)))
iris2.pars <- iris2[, 1:4] %>% as.matrix
iris2.pars.d <- dist(iris2.pars)
iris2.MHV <- betadisper(iris2.pars.d, gr)
iris2.MHV
par(mfrow = c(1,1))
plot(iris2.MHV)
anova(iris2.MHV)
permutest(iris2.MHV)
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j], col = (j+1) )
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j], col = (j+1), colnames(iris2.pars[j]) )
}
boxplot(iris2.pars[,j], col = (j+1), main = colnames(iris2.pars[j]) )
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j], col = (j+1), main = colnames(iris2.pars[j]) )
}
boxplot(iris2.pars[,j], col = (j+1), main = colnames(iris2[j]) )
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j], col = (j+1), main = colnames(iris2[j]) )
}
par(mfrow = c(1, ncol(iris2)))
for(j in 1:ncol(iris2)){
boxplot(iris2[,j], col = (j+1), main = colnames(iris2[j]) )
}
iris2.pars <- iris2[, 1:4] %>% as.matrix
iris2.pars.d <- dist(iris2.pars)
iris2.MHV <- betadisper(iris2.pars.d, gr)
iris2.MHV
par(mfrow = c(1,1))
plot(iris2.MHV)
anova(iris2.MHV)
permutest(iris2.MHV)
iris2.pars <- iris2[, 1:4] %>% as.matrix
iris2.pars.d <- dist(iris2.pars)
iris2.MHV <- betadisper(iris2.pars.d, gr)
iris2.cluster <- iris.hle %>% vegdist("euc") %>% hclust("ward.D2")
plot(iris2.cluster)
iris2.gr <-  iris2.cluster %>% cutree(3)
table(iris2.gr)
iris2.pars <- iris2[, 1:4] %>% as.matrix
iris2.pars.d <- dist(iris2.pars)
iris2.MHV <- betadisper(iris2.pars.d, iris2.gr)
iris2.MHV
par(mfrow = c(1,1))
plot(iris2.MHV)
anova(iris2.MHV)
permutest(iris2.MHV)
par(mfrow = c(1, ncol(iris)))
for(j in 1:ncol(iris.pars2)){
hist(iris.pars2[,j])}
par(mfrow = c(1, ncol(iris)))
for(j in 1:ncol(iris)){
hist(iris.pars2[,j])}
par(mfrow = c(1, ncol(iris)))
for(j in 1:ncol(iris)){
hist(iris.pars2[,j])}
par(mfrow = c(1, ncol(iris)))
for(j in 1:ncol(iris)){
hist(iris[,j])}
par(mfrow = c(1, ncol(iris)))
for(j in 1:ncol(iris)){
boxplot(iris[,j],
col = (j+1),
main = colnames(iris)[j])
}
par(mfrow = c(1, ncol(iris.pars)))
for(j in 1:ncol(iris.pars)){
boxplot(iris.pars[,j],
col = (j+1),
main = colnames(iris.pars)[j])
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j])}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j])}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j],
col = (j+1))
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j],
col = (j+1)),
main = colnames(iris2.pars)[j]
}
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j],
col = (j+1),
main = colnames(iris2.pars)[j])
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j],
col = (j+1),
main = colnames(iris2.pars[j]) )
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j],
col = (j+1),
main = colnames(iris2.pars)[j])
}
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j],
col = (j+1),
main = colnames(iris2.pars)[j])
}
mshapiro.test(t(iris.pars2))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(dplyr)
library(magrittr)
library(ggplot2)
library(vegan) # standardization
source('Source_LDA.R') # ModelPerformance
# Chunk 3
iris.hle <- iris[1:4] %>% as.matrix %>% decostand("hellinger")
# Chunk 4
iris.cluster <- iris.hle %>% vegdist("euc") %>% hclust("ward.D2")
plot(iris.cluster)
iris.gr <-  iris.cluster %>% cutree(3)
table(iris.gr)
# Chunk 5
any(is.na(iris))
# Chunk 6
iris.pars <- iris[,1:4] %>% as.matrix
iris.pars.d <- dist(iris.pars)
iris.MHV <- betadisper(iris.pars.d, gr)
iris.MHV
plot(iris.MHV)
anova(iris.MHV)
permutest(iris.MHV)
# Chunk 7
par(mfrow = c(1, ncol(iris.pars)))
for(j in 1:ncol(iris.pars)){
boxplot(iris.pars[,j],
col = (j+1),
main = colnames(iris.pars)[j])
}
# Chunk 8
timeDate::skewness(iris[1:4])
# Chunk 9
outliers::outlier(iris[2])
# Chunk 10
which(iris[2] >= 4.1 | iris[2] < 2.2) # depend on boxplot
# Chunk 11
ptr <- which(iris[2] >= 4.1 | iris[2] < 2.2)
iris[ptr, 2] <- mean(iris[,2])
iris2 <- cbind(log(iris[1]), iris[2], iris[3], iris[4])
# Chunk 12
## Check Again
timeDate::skewness(iris2[1:4])
iris2.cluster <- iris.hle %>% vegdist("euc") %>% hclust("ward.D2")
plot(iris2.cluster)
iris2.gr <-  iris2.cluster %>% cutree(3)
table(iris2.gr)
iris2.pars <- iris2[, 1:4] %>% as.matrix
iris2.pars.d <- dist(iris2.pars)
iris2.MHV <- betadisper(iris2.pars.d, iris2.gr)
iris2.MHV
par(mfrow = c(1,1))
plot(iris2.MHV)
anova(iris2.MHV)
permutest(iris2.MHV)
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
boxplot(iris2.pars[,j],
col = (j+1),
main = colnames(iris2.pars)[j])
}
# Chunk 13
par(mfrow = c(1, ncol(iris2.pars)))
for(j in 1:ncol(iris2.pars)){
hist(iris2.pars[,j],
col = (j+1),
main = colnames(iris2.pars)[j])
}
mshapiro.test
??mshapiro.test
install.packages('RVAideMemoire')
RVAideMemoire::mshapiro.test(t(iris.pars2))
RVAideMemoire::mshapiro.test(t(iris2.pars))
iris2.pars
RVAideMemoire::mshapiro.test(iris2.pars)
as.dist(cor(iris.pars2))
as.dist(cor(iris2.pars))
faraway::vif(iris.pars2)
install.packages('faraway')
as.dist(cor(iris2.pars))
faraway::vif(iris.pars2)
faraway::vif(iris2.pars)
max(faraway::vif(iris2.pars))
iris2.vif <- faraway::vif(iris2.pars)
iris2.vif
which.max(iris2.vif )
iris.pars3 <- iris.pars[, -which.max(iris2.vif)]
ptr <- which.max(iris2.vif)
iris.pars3 <- iris.pars[, -ptr]
ptr <- which.max(iris2.vif)
iris.pars3 <- iris.pars[, -ptr]
ptr <- which.max(iris2.vif)
iris.pars3 <- iris.pars[, -ptr]
iris.pars3
iris.pars3 <- iris2.pars[, -ptr]
psych::pairs.panels(iris[1:4], gap = 0, bg = c("red", "blue", "green")[iris$Species], pch = 21)
install.packages('psych')
psych::pairs.panels(iris[1:4], gap = 0, bg = c("red", "blue", "green")[iris$Species], pch = 21)
psych::pairs.panels(iris[1:4], gap = 0, bg = c("red", "blue", "green")[iris$Species], pch = 18)
psych::pairs.panels(iris[1:4], gap = 0, bg = c("red", "blue", "green")[iris$Species], pch = 21)
iris.pars3.df <- iris3.pars %>% as.data.frame
iris.pars3.df
iris.pars3.df <- iris3.pars %>% as.data.frame
iris3.pars <- iris2.pars[, -ptr]
iris.pars3.df <- iris3.pars %>% as.data.frame
iris.pars3.df
iris.lda <- lda(gr ~ Sepal.Length + Sepal.Width + Petal.Width, data = iris.pars3.df)
iris3.pars.df <- iris3.pars %>% as.data.frame
iris.lda <- lda(Species ~ Sepal.Length + Sepal.Width + Petal.Width, data = iris3.pars.df)
??lda
iris.lda <- MASS::lda(Species ~ Sepal.Length + Sepal.Width + Petal.Width, data = iris3.pars.df)
iris3.pars.df
iris3 <- iris2[, -ptr]
iris3.pars <- iris2.pars[, -ptr]
psych::pairs.panels(iris3[1:4], gap = 0, bg = c("red", "blue", "green")[iris3$Species], pch = 21)
psych::pairs.panels(iris[1:4], gap = 0, bg = c("red", "blue", "green")[iris$Species], pch = 21)
iris3
psych::pairs.panels(iris2[1:4], gap = 0, bg = c("red", "blue", "green")[iris2$Species], pch = 21)
iris3.pars
iris3 <- iris2[, -ptr]
iris.lda <- MASS::lda(Species ~ Sepal.Length + Sepal.Width + Petal.Width, data = iris3)
iris3
iris2 <- cbind(log(iris[1]), iris[2], iris[3], iris[4], iris[5])
iris3 <- iris2[, -ptr]
iris.lda <- MASS::lda(Species ~ Sepal.Length + Sepal.Width + Petal.Width, data = iris3)
model.Lda <- MASS::lda(formula,
data = data)
pred.LDA <- predict.bagging(model.LDA,
newdata = LDA)
pred.LDA <- predict(model.LDA,
newdata = LDA)
model.LDA <- MASS::lda(formula,
data = data)
data <- iris3
formula <- formula(Species ~ Sepal.Length + Sepal.Width + Petal.Width)
## Model
```{r}
model.LDA <- MASS::lda(formula,
data = data)
## Predict
```{r}
pred.LDA <- predict(model.LDA,
newdata = LDA)
pred.LDA <- predict(model.LDA,
newdata = data)
pred.LDA <- predict(model.LDA,
newdata = data)
pred.LDA$class
data <- iris3
set.seed(20200513)
train_proportion = 0.9
formula <- formula(Species ~ Sepal.Length + Sepal.Width + Petal.Width)
dataPartition = Partition(data, train_proportion)
training = dataPartition$training
testing = dataPartition$testing
model.LDA <- MASS::lda(formula,
data = training)
Y_attribute = 'Species'
plot(model.LDA)
par(mfrow = c(1, 1)
par(mfrow = c(1, 1))
plot(model.LDA)
plot(model.LDA)
pred.LDA <- predict(model.LDA,
newdata = training)
perform.LDA.Apparent <- ModelPerformance(pred.LDA, training[,Y_attribute])
ModelPerformance
pred.LDA
pred.LDA <- predict(model.LDA,
newdata = training,
type="class")
perform.LDA.Apparent <- ModelPerformance(pred.LDA, training[,Y_attribute])
pred.LDA
pred.LDA <- predict(model.LDA,
newdata = training)
pred.LDA
perform.LDA.Apparent <- ModelPerformance(pred.LDA$class, training[,Y_attribute])
pred.LDA$class
training[,Y_attribute]
training[,Y_attribute]
training[,Y_attribute]
training[,Y_attribute]
training[,Y_attribute]
training[,Y_attribute]
pred.LDA$class
perform.LDA.Apparent <- ModelPerformance(pred.LDA$class, training[,Y_attribute])
View(ModelPerformance)
tidyr
require(tidyr)
install.packages(tidyr)
install.packages('tidyr')
perform.LDA.Apparent <- ModelPerformance(pred.LDA$class, training[,Y_attribute])
perform.LDA.Apparent$confusion_matrix
perform.LDA.Apparent$plot_positive
perform.LDA.Apparent$ACC
View(ModelPerformance)
install.packages(c("doParallel", "foreach"))
pred.LDA <- predict(model.LDA,
newdata = training)
perform.LDA.Apparent <- ModelPerformance(pred.LDA$class, training[,Y_attribute])
perform.LDA.Apparent$confusion_matrix
perform.LDA.Apparent <- ModelPerformance(pred.LDA$class, training[,Y_attribute])
perform.LDA.Apparent$confusion_matrix
perform.LDA.Apparent$ACC
source('Source_LDA.R') # ModelPerformance
perform.LDA.Apparent$ACC
perform.LDA.Apparent <- ModelPerformance(pred.LDA$class, training[,Y_attribute])
perform.LDA.Apparent$confusion_matrix
perform.LDA.Apparent$ACC
# Apparent Performance
pred.LDA <- predict(model.LDA,
newdata = training)$class
perform.LDA.Apparent <- ModelPerformance(pred.LDA, training[,Y_attribute])
perform.LDA.Apparent$confusion_matrix
perform.LDA.Apparent$ACC
### Testing
```{r message=FALSE, warning=FALSE}
# True Performance
pred.CART.test <- predict(model.LDA,
newdata=testing,
type="class")
# True Performance
pred.LDA.test <- predict(model.LDA,
newdata=testing,
type="class")
perform.LDA.True <- ModelPerformance(pred.LDA.test, testing[,Y_attribute])
# True Performance
pred.LDA.test <- predict(model.LDA,
newdata=testing,
type="class")$class
perform.LDA.True <- ModelPerformance(pred.LDA.test, testing[,Y_attribute])
perform.LDA.True <- ModelPerformance(pred.LDA.test, testing[,Y_attribute])
## Confusion Matrix
perform.LDA.True$confusion_matrix
## Accuracy
perform.LDA.True$ACC
ggord(model.LDA, training[,Y_attribute])
devtools::install_github('fawda123/ggord')
# devtools::install_github('fawda123/ggord')
library(ggord)
ggord(model.LDA, training[,Y_attribute])
devtools::install_github('fawda123/ggord')
devtools::install_github('fawda123/ggord')
